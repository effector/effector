// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin should attach 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/attach.js'
import {attach, createEffect} from 'effector'
const effect = createEffect({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'effect',
  sid: 'bswcgo',
})
const foo1 = attach({
  and: {
    effect,
    mapParams: _ => _,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 5,
      column: 13,
    },
    name: 'foo1',
    sid: '-lm7jny',
  },
})
attach({
  and: {
    effect,
    mapParams: _ => _,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 0,
    },
    sid: 'tyndxx',
  },
})
const config = {
  effect,
  mapParams: _ => _,
}
const foo2 = attach({
  and: config,
  or: {
    loc: {
      file: _effectorFileName,
      line: 20,
      column: 13,
    },
    name: 'foo2',
    sid: '-5raqzc',
  },
})

const f = () =>
  attach({
    and: {
      effect,
      mapParams: _ => _,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 23,
        column: 2,
      },
      name: 'f',
      sid: 'he4rvf',
    },
  })

{
  const incorrect = attach(config)

  function attach() {}
}
{
  const attach = () => {}

  const incorrect = attach(config)
}
{
  const attach = () => {}

  if (true) {
    const incorrect = attach(config)
  }
}
"
`;

exports[`babel-plugin should combine 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/combine.js'
import {createStore, combine} from 'effector'
const foo = createStore('foo', {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'v1pf4q',
})
const bar = createStore('h', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-9jmed0',
})
const baz1 = combine({
  and: [
    {
      foo,
      bar,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    name: 'baz1',
    sid: '1g4di',
  },
})
const baz2 = combine({
  and: [[foo, bar]],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 13,
    },
    name: 'baz2',
    sid: '-3gpv6k',
  },
})
const baz3 = combine({
  and: [foo, bar, (a, b) => [a, b]],
  or: {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 13,
    },
    name: 'baz3',
    sid: '-6yvuqm',
  },
})
const spread = [foo, bar]
const baz4 = combine({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 11,
      column: 13,
    },
    name: 'baz4',
    sid: '-ddkb7v',
  },
})
const shape = {
  foo,
  bar,
}
const baz5 = combine({
  and: [shape],
  or: {
    loc: {
      file: _effectorFileName,
      line: 14,
      column: 13,
    },
    name: 'baz5',
    sid: '6s8rf7',
  },
})
combine({
  and: [
    {
      foo,
      bar,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 16,
      column: 0,
    },
    sid: '6ch4b5',
  },
})
combine({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 17,
      column: 0,
    },
    sid: '6d0wwi',
  },
})

const f = a =>
  combine({
    and: [
      {
        foo,
        bar,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 19,
        column: 15,
      },
      name: 'f',
      sid: '-l6wxyg',
    },
  })

{
  const incorrect = combine({
    foo,
  })

  function combine() {}
}
{
  const combine = () => {}

  if (true) {
    const incorrect = combine({
      foo,
    })
  }
}
"
`;

exports[`babel-plugin should create domain 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: '-rjlanx',
})
const foo = createDomain('bar', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'foo',
  sid: '-lfniv1',
})
const {sid} = createDomain({
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 14,
  },
  sid: '-j1w0p7',
})
const {name} = createDomain('foo', {
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 15,
  },
  sid: '-ikuea5',
})
const {shortName} = createDomain(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 20,
    },
    sid: '-i3sr9k',
  },
)
createDomain({
  loc: {
    file: _effectorFileName,
    line: 10,
    column: 0,
  },
  sid: '-kmjnzf',
})
createDomain({
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 0,
  },
  sid: '-klg2sp',
})
{
  const incorrect = createDomain()

  function createDomain() {}
}
{
  const createDomain = () => {}

  if (true) {
    const incorrect = createDomain()
  }
}
"
`;

exports[`babel-plugin should create domain domain 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain-domain.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: '-k9s1ws',
})
const foo = domain.domain({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'foo',
  sid: '-vvg548',
})
const bar = domain.domain('baz', {
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 12,
  },
  name: 'bar',
  sid: 'kbc9j8',
})
const fooAlias = domain.createDomain({
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 17,
  },
  name: 'fooAlias',
  sid: '6ob94k',
})
const barAlias = domain.createDomain('bazAlias', {
  loc: {
    file: _effectorFileName,
    line: 8,
    column: 17,
  },
  name: 'barAlias',
  sid: '-asopga',
})
const {sid} = domain.createDomain({
  loc: {
    file: _effectorFileName,
    line: 10,
    column: 14,
  },
  sid: 's50md5',
})
const {name} = domain.createDomain('foo', {
  loc: {
    file: _effectorFileName,
    line: 11,
    column: 15,
  },
  sid: 'sm28s7',
})
const {shortName} = domain.createDomain(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 20,
    },
    sid: 't33vss',
  },
)
domain.createDomain({
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 0,
  },
  sid: 'asf142',
})
domain.createDomain({
  loc: {
    file: _effectorFileName,
    line: 16,
    column: 0,
  },
  sid: 'atimas',
})
"
`;

exports[`babel-plugin should create domain effect 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain-effect.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: '-gwz5w9',
})
const a = domain.effect({
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'a',
  sid: '-yrcjkp',
})

const f = () =>
  domain.effect({
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 16,
    },
    name: 'f',
    sid: 'jhjhqd',
  })

const b = domain.effect('hello', {
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 10,
  },
  name: 'b',
  sid: 'xrlmjq',
})

const g = () =>
  domain.effect('baz', {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 16,
    },
    name: 'g',
    sid: 'gzdlvo',
  })

const aAlias = domain.createEffect({
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 15,
  },
  name: 'aAlias',
  sid: 'lkzafg',
})

const fAlias = () =>
  domain.createEffect({
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 21,
    },
    name: 'fAlias',
    sid: '-ywgdjk',
  })

const bAlias = domain.createEffect('helloAlias', {
  loc: {
    file: _effectorFileName,
    line: 11,
    column: 15,
  },
  name: 'bAlias',
  sid: '-i4te7u',
})

const gAlias = () =>
  domain.createEffect('bazAlias', {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 21,
    },
    name: 'gAlias',
    sid: 'x03ktr',
  })

const {sid} = domain.createEffect({
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 14,
  },
  sid: '-805fjy',
})
const {name} = domain.createEffect('foo', {
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 15,
  },
  sid: '-7j3t4w',
})
const {shortName} = domain.createEffect(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 16,
      column: 20,
    },
    sid: '-72264b',
  },
)
domain.createEffect({
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 0,
  },
  sid: 'e7f3i1',
})
domain.createEffect({
  loc: {
    file: _effectorFileName,
    line: 20,
    column: 0,
  },
  sid: 'ek2d5c',
})
"
`;

exports[`babel-plugin should create domain event 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain-event.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: '2t180m',
})
const a = domain.event({
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'a',
  sid: '-hh3210',
})

const f = () =>
  domain.event({
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 16,
    },
    name: 'f',
    sid: '-ofjjww',
  })

const b = domain.event('asm', {
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 10,
  },
  name: 'b',
  sid: 'olrsnt',
})

const g = () =>
  domain.event('tasm', {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 16,
    },
    name: 'g',
    sid: 'hnbarx',
  })

const aAlias = domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 15,
  },
  name: 'aAlias',
  sid: 'p4m37p',
})

const fAlias = () =>
  domain.createEvent({
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 21,
    },
    name: 'fAlias',
    sid: 's9mo4t',
  })

const bAlias = domain.createEvent('asmAlias', {
  loc: {
    file: _effectorFileName,
    line: 11,
    column: 15,
  },
  name: 'bAlias',
  sid: '-2t87zp',
})

const gAlias = () =>
  domain.createEvent('tasmAlias', {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 21,
    },
    name: 'gAlias',
    sid: '1l50ei',
  })

const {sid} = domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 14,
  },
  sid: '5rhe6j',
})
const {name} = domain.createEvent('foo', {
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 15,
  },
  sid: '68j0ll',
})
const {shortName} = domain.createEvent(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 16,
      column: 20,
    },
    sid: '6pknm6',
  },
)
domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 0,
  },
  sid: '-vajmz4',
})
domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 20,
    column: 0,
  },
  sid: '-uxwdbt',
})
domain.createEvent('foo', {
  loc: {
    file: _effectorFileName,
    line: 22,
    column: 0,
  },
  sid: '-uwss53',
})
"
`;

exports[`babel-plugin should create domain store 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain-store.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: '-g6jnpt',
})
const a = domain.store('bar', {
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'a',
  sid: 'ykg47p',
})
const b = domain.store('h', {
  and: {
    option: 'test',
    ['na' + 'me']: 'LOL',
  },
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 10,
  },
  name: 'b',
  sid: '555aj7',
})
const c = domain.store('h', {
  and: {
    name: 'test',
  },
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 10,
  },
  name: 'c',
  sid: '-oa5j5b',
})
const d = domain.store('h', {
  and: null,
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 10,
  },
  name: 'd',
  sid: 'hspbji',
})
const e = domain.store('h', {
  and: 4234,
  loc: {
    file: _effectorFileName,
    line: 11,
    column: 10,
  },
  name: 'e',
  sid: '777zke',
})
const f = domain.store('h', {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 10,
  },
  name: 'f',
  sid: '480hbi',
})
const aAlias = domain.createStore('bar', {
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 15,
  },
  name: 'aAlias',
  sid: '5uenrk',
})
const bAlias = domain.createStore('h', {
  and: {
    option: 'test',
    ['na' + 'me']: 'LOL',
  },
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 15,
  },
  name: 'bAlias',
  sid: '-lb4mcy',
})
const cAlias = domain.createStore('h', {
  and: {
    name: 'testAlias',
  },
  loc: {
    file: _effectorFileName,
    line: 16,
    column: 15,
  },
  name: 'cAlias',
  sid: 'mkg5ho',
})
const dAlias = domain.createStore('h', {
  and: null,
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 15,
  },
  name: 'dAlias',
  sid: '-441i8n',
})
const eAlias = domain.createStore('h', {
  and: 4234,
  loc: {
    file: _effectorFileName,
    line: 20,
    column: 15,
  },
  name: 'eAlias',
  sid: '-kul3ov',
})
const fAlias = domain.createStore('h', {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 21,
    column: 15,
  },
  name: 'fAlias',
  sid: 'n0zo5r',
})
const {sid} = domain.createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 22,
    column: 14,
  },
  sid: '-wagbv',
})
const {shortName} = domain.createStore(null, {
  and: {
    name: 'foo',
  },
  loc: {
    file: _effectorFileName,
    line: 23,
    column: 20,
  },
  sid: '-f8taf',
})
domain.createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 25,
    column: 0,
  },
  sid: 'l6drvp',
})
domain.createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 27,
    column: 0,
  },
  sid: 'l7hd2f',
})
"
`;

exports[`babel-plugin should create effect 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-effect.js'
import {createEffect} from 'effector'
const foo = createEffect({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '-ijw98p',
})
const bar = createEffect('hello', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-zbsahj',
})
const baz = createEffect(
  {
    handler() {
      return 0
    },
  },
  {
    loc: {
      file: _effectorFileName,
      line: 5,
      column: 12,
    },
    name: 'baz',
    sid: '-w5vgqo',
  },
)
const quux = createEffect('nice', {
  and: {
    handler() {
      return 0
    },
  },
  loc: {
    file: _effectorFileName,
    line: 10,
    column: 13,
  },
  name: 'quux',
  sid: '-fu1zix',
})

const f = () =>
  createEffect({
    loc: {
      file: _effectorFileName,
      line: 15,
      column: 16,
    },
    name: 'f',
    sid: 'x9z3su',
  })

const {sid} = createEffect({
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 14,
  },
  sid: 'dn0ezs',
})
const {name} = createEffect('foo', {
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 15,
  },
  sid: 'e421eu',
})
const {shortName} = createEffect(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 20,
    },
    sid: 'el3off',
  },
)
createEffect({
  loc: {
    file: _effectorFileName,
    line: 21,
    column: 0,
  },
  sid: '-gs5czc',
})
createEffect({
  loc: {
    file: _effectorFileName,
    line: 23,
    column: 0,
  },
  sid: '-gr1rsm',
})
{
  const incorrect = createEffect()

  function createEffect() {}
}
{
  const createEffect = () => {}

  if (true) {
    const incorrect = createEffect()
  }
}
"
`;

exports[`babel-plugin should create event 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-event.js'
import {createEvent} from 'effector'
const foo = createEvent({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'po0ass',
})
const bar = createEvent('hello', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: 'e4l32w',
})
const baz = createEvent(
  {
    name: 'nice',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 5,
      column: 12,
    },
    name: 'baz',
    sid: 'zb55dr',
  },
)

const f = () =>
  createEvent({
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 16,
    },
    name: 'f',
    sid: 'ujzd7p',
  })

const {sid} = createEvent({
  loc: {
    file: _effectorFileName,
    line: 8,
    column: 14,
  },
  sid: 'uddyxb',
})
const {name} = createEvent('foo', {
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 15,
  },
  sid: 'uuflcd',
})
const {shortName} = createEvent(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 20,
    },
    sid: '-bimh5h',
  },
)
createEvent({
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 0,
  },
  sid: '-4wemi5',
})
createEvent({
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 0,
  },
  sid: '-4vb1bf',
})
{
  const incorrect = createEvent()

  function createEvent() {}
}
{
  const createEvent = () => {}

  if (true) {
    const incorrect = createEvent()
  }
}
"
`;

exports[`babel-plugin should create gate 1`] = `
"var _effectorFileName2 = '/src/babel/__tests__/fixtures/create-gate.js'
import {createDomain} from 'effector'
import {createGate} from 'effector-react'
import {createGate as renamedGate} from 'effector-react/scope'
import {createGate as compatGate} from 'effector-react/compat'
const Gate1 = createGate({
  and: [],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 6,
      column: 14,
    },
    name: 'Gate1',
    sid: 'ggz6t4',
  },
})
const Gate2 = createGate({
  and: ['gate2'],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 7,
      column: 14,
    },
    name: 'Gate2',
    sid: 'o6svhy',
  },
})
const Gate3 = createGate({
  and: [
    {
      defaultState: {
        a: 1,
      },
      domain: createDomain({
        loc: {
          file: _effectorFileName2,
          line: 10,
          column: 10,
        },
        name: 'domain',
        sid: '-c59o1r',
      }),
      name: 'gate3',
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 8,
      column: 14,
    },
    name: 'Gate3',
    sid: 'vwmk6s',
  },
})
const Gate4 = createGate({
  and: [
    'default',
    {
      counter: 0,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 13,
      column: 14,
    },
    name: 'Gate4',
    sid: '-m3dk75',
  },
})
const Gate5 = createGate({
  and: [
    {
      and: ['gate2'],
      or: {
        loc: {
          file: _effectorFileName,
          line: 7,
          column: 14,
        },
        sid: '4gk531',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 14,
      column: 14,
    },
    name: 'Gate5',
    sid: '-a5i4kh',
  },
})
const TheGate1 = renamedGate({
  and: [],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 26,
      column: 17,
    },
    name: 'TheGate1',
    sid: 'dx5sg6',
  },
})
const TheGate2 = renamedGate({
  and: ['gate2'],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 27,
      column: 17,
    },
    name: 'TheGate2',
    sid: 'pv182u',
  },
})
const TheGate3 = renamedGate({
  and: [
    {
      defaultState: {
        a: 1,
      },
      domain: createDomain({
        loc: {
          file: _effectorFileName2,
          line: 30,
          column: 10,
        },
        name: 'domain',
        sid: 'h7iweb',
      }),
      name: 'gate3',
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 28,
      column: 17,
    },
    name: 'TheGate3',
    sid: '-x87e9m',
  },
})
const CompatGate1 = compatGate({
  and: [],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 34,
      column: 20,
    },
    name: 'CompatGate1',
    sid: '-kvdrr4',
  },
})
const CompatGate2 = compatGate({
  and: ['gate2'],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 35,
      column: 20,
    },
    name: 'CompatGate2',
    sid: '-8xic4g',
  },
})
const CompatGate3 = compatGate({
  and: [
    {
      defaultState: {
        a: 1,
      },
      domain: createDomain({
        loc: {
          file: _effectorFileName2,
          line: 38,
          column: 10,
        },
        name: 'domain',
        sid: 'kzvvjv',
      }),
      name: 'gate3',
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 36,
      column: 20,
    },
    name: 'CompatGate3',
    sid: '30d3i8',
  },
})
"
`;

exports[`babel-plugin should create store 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-store.js'
import {createStore} from 'effector'
const foo = createStore('foo', {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '6off2d',
})
const a = createStore('h', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 10,
  },
  name: 'a',
  sid: 'oba8ch',
})
const b = createStore('h', {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'b',
  sid: '-yrydzz',
})
const c = createStore('h', {
  and: 23020,
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 10,
  },
  name: 'c',
  sid: '-mu2ydb',
})
const config = {
  option: 0,
}
const dod = createStore(null, {
  and: config,
  loc: {
    file: _effectorFileName,
    line: 8,
    column: 12,
  },
  name: 'dod',
  sid: '441vf7',
})

const f = a =>
  createStore(a, {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 15,
    },
    name: 'f',
    sid: '34ig6u',
  })

const {sid} = createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 14,
  },
  sid: '-uym4yd',
})
const {shortName} = createStore(null, {
  and: {
    name: 'foo',
  },
  loc: {
    file: _effectorFileName,
    line: 13,
    column: 20,
  },
  sid: '-uhkhwx',
})
createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 0,
  },
  sid: '-nuc4gh',
})
createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 0,
  },
  sid: '-nt8j9r',
})
{
  const incorrect = createStore(null)

  function createStore() {}
}
{
  const createStore = () => {}

  if (true) {
    const incorrect = createStore(null)
  }
}
"
`;

exports[`babel-plugin should createApi 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/createApi.js'
import {createStore, createEvent, createApi} from 'effector'
const foo = createStore([], {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '-i3v0at',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: 'b701d9',
})
const baz1 = createApi({
  and: [
    foo,
    {
      reset: () => [],
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    sid: 'hmnu4d',
  },
})
createApi({
  and: [
    foo,
    {
      reset: () => [],
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 0,
    },
    sid: '-3zya1g',
  },
})
const spread = [
  foo,
  {
    reset: () => [],
  },
]
const baz4 = createApi({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 13,
    },
    sid: '-m0rrok',
  },
})

const f = () =>
  createApi({
    and: [
      foo,
      {
        reset: () => [],
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 12,
        column: 16,
      },
      sid: '-l2oitl',
    },
  })

{
  const incorrect = createApi(foo, {})

  function createApi() {}
}
{
  const createApi = () => {}

  if (true) {
    const incorrect = createApi(foo, {})
  }
}
"
`;

exports[`babel-plugin should createGate 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/createGate.js'
import {createGate} from 'effector-react'
import {createGate as createGateScope} from 'effector-react/scope'
{
  const Empty = createGate({
    and: [],
    or: {
      loc: {
        file: _effectorFileName,
        line: 5,
        column: 16,
      },
      name: 'Empty',
      sid: '96s88f',
    },
  })
  const Name = createGate({
    and: ['Foo'],
    or: {
      loc: {
        file: _effectorFileName,
        line: 6,
        column: 15,
      },
      name: 'Name',
      sid: '-lwgh1v',
    },
  })
  const ConfigObject = createGate({
    and: [
      {
        defaultState: 0,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 7,
        column: 23,
      },
      name: 'ConfigObject',
      sid: 'xd3ucl',
    },
  })
  const config = {
    defaultState: 0,
  }
  const ConfigVariable = createGate({
    and: [config],
    or: {
      loc: {
        file: _effectorFileName,
        line: 9,
        column: 25,
      },
      name: 'ConfigVariable',
      sid: '3xf7ku',
    },
  })
}
{
  const Empty = createGateScope({
    and: [],
    or: {
      loc: {
        file: _effectorFileName,
        line: 13,
        column: 16,
      },
      name: 'Empty',
      sid: 'gizoyq',
    },
  })
  const Name = createGateScope({
    and: ['Foo'],
    or: {
      loc: {
        file: _effectorFileName,
        line: 14,
        column: 15,
      },
      name: 'Name',
      sid: 'wyq1no',
    },
  })
  const ConfigObject = createGateScope({
    and: [
      {
        defaultState: 0,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 15,
        column: 23,
      },
      name: 'ConfigObject',
      sid: 'r95b1s',
    },
  })
  const config = {
    defaultState: 0,
  }
  const ConfigVariable = createGateScope({
    and: [config],
    or: {
      loc: {
        file: _effectorFileName,
        line: 17,
        column: 25,
      },
      name: 'ConfigVariable',
      sid: '9qp1qn',
    },
  })
}
"
`;

exports[`babel-plugin should debug sids with options 1`] = `
"import {
  createDomain,
  createEffect,
  createEvent,
  createStore,
  restore,
} from 'effector'
{
  const domain = createDomain({
    name: 'domain',
    sid: '-umn61j:/src/babel/__tests__/fixtures/debug-sids.js:domain',
  })
  const a = domain.store('bar', {
    name: 'a',
    sid: '-p40n10:/src/babel/__tests__/fixtures/debug-sids.js:a',
  })
  const b = domain.store('h', {
    and: {
      option: 'test',
      ['na' + 'me']: 'LOL',
    },
    name: 'b',
    sid: '-he6yc6:/src/babel/__tests__/fixtures/debug-sids.js:b',
  })
  const c = domain.store('h', {
    and: {
      name: 'test',
    },
    name: 'c',
    sid: '-9od9nc:/src/babel/__tests__/fixtures/debug-sids.js:c',
  })
  const d = domain.store('h', {
    and: null,
    name: 'd',
    sid: '-1hhykb:/src/babel/__tests__/fixtures/debug-sids.js:d',
  })
  const e = domain.store('h', {
    and: 4234,
    name: 'e',
    sid: '6pdciq:/src/babel/__tests__/fixtures/debug-sids.js:e',
  })
  const f = domain.store('h', {
    and: {},
    name: 'f',
    sid: 'ef717k:/src/babel/__tests__/fixtures/debug-sids.js:f',
  })
  const aAlias = domain.createStore('bar', {
    name: 'aAlias',
    sid: '-dri1et:/src/babel/__tests__/fixtures/debug-sids.js:aAlias',
  })
  const bAlias = domain.createStore('h', {
    and: {
      option: 'test',
      ['na' + 'me']: 'LOL',
    },
    name: 'bAlias',
    sid: '-8njjnp:/src/babel/__tests__/fixtures/debug-sids.js:bAlias',
  })
  const cAlias = domain.createStore('h', {
    and: {
      name: 'testAlias',
    },
    name: 'cAlias',
    sid: '-3jl1wl:/src/babel/__tests__/fixtures/debug-sids.js:cAlias',
  })
  const dAlias = domain.createStore('h', {
    and: null,
    name: 'dAlias',
    sid: '21f28q:/src/babel/__tests__/fixtures/debug-sids.js:dAlias',
  })
  const eAlias = domain.createStore('h', {
    and: 4234,
    name: 'eAlias',
    sid: '7mf6e1:/src/babel/__tests__/fixtures/debug-sids.js:eAlias',
  })
  const fAlias = domain.createStore('h', {
    and: {},
    name: 'fAlias',
    sid: 'cqdo55:/src/babel/__tests__/fixtures/debug-sids.js:fAlias',
  })
  const {sid} = domain.createStore(null, {
    sid: 't2a2nn:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  const {shortName} = domain.createStore(null, {
    and: {
      name: 'foo',
    },
    sid: 'tjbpp3:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  domain.createStore(null, {
    sid: '-r418i0:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
  domain.createStore(null, {
    sid: '-r2xnba:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
}
{
  const foo = createEffect({
    name: 'foo',
    sid: '-4xbjof:/src/babel/__tests__/fixtures/debug-sids.js:foo',
  })
  const bar = createEffect('hello', {
    name: 'bar',
    sid: '-2jqlf1:/src/babel/__tests__/fixtures/debug-sids.js:bar',
  })
  const baz = createEffect(
    {
      handler() {
        return 0
      },
    },
    {
      name: 'baz',
      sid: '-f5kimu:/src/babel/__tests__/fixtures/debug-sids.js:baz',
    },
  )
  const quux = createEffect('nice', {
    and: {
      handler() {
        return 0
      },
    },
    name: 'quux',
    sid: '-o01o3h:/src/babel/__tests__/fixtures/debug-sids.js:quux',
  })

  const fa = () =>
    createEffect({
      name: 'fa',
      sid: '-f4wwm2:/src/babel/__tests__/fixtures/debug-sids.js:fa',
    })

  const {sid} = createEffect({
    sid: '-18yher:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  const {name} = createEffect('foo', {
    sid: '-rwuzp:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  const {shortName} = createEffect(
    {
      name: 'foo',
    },
    {
      sid: '-av7z4:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
    },
  )
  createEffect({
    sid: '-q3qtc6:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
  createEffect({
    sid: '-q2n85g:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
}
{
  const foo = createStore('foo', {
    name: 'foo',
    sid: '-yrihcm:/src/babel/__tests__/fixtures/debug-sids.js:foo',
  })
  const a = createStore('h', {
    name: 'a',
    sid: '-ma3nhs:/src/babel/__tests__/fixtures/debug-sids.js:a',
  })
  const b = createStore('h', {
    and: {},
    name: 'b',
    sid: '-ek9ysy:/src/babel/__tests__/fixtures/debug-sids.js:b',
  })
  const c = createStore('h', {
    and: 23020,
    name: 'c',
    sid: '-6denpx:/src/babel/__tests__/fixtures/debug-sids.js:c',
  })
  const config = {
    option: 0,
  }
  const dod = createStore(null, {
    and: config,
    name: 'dod',
    sid: 'ts6uvl:/src/babel/__tests__/fixtures/debug-sids.js:dod',
  })

  const f = a =>
    createStore(a, {
      name: 'f',
      sid: 'h940v3:/src/babel/__tests__/fixtures/debug-sids.js:f',
    })

  const {sid} = createStore(null, {
    sid: 's3u31b:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  const {shortName} = createStore(null, {
    and: {
      name: 'foo',
    },
    sid: 'skvq2r:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  createStore(null, {
    sid: '-p67d55:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
  createStore(null, {
    sid: '-p53ryf:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
}
{
  const foo = createEvent({
    name: 'foo',
    sid: '-5vrjar:/src/babel/__tests__/fixtures/debug-sids.js:foo',
  })
  const bar = createEvent('hello', {
    name: 'bar',
    sid: '-3i6l1d:/src/babel/__tests__/fixtures/debug-sids.js:bar',
  })
  const baz = createEvent(
    {
      name: 'nice',
    },
    {
      name: 'baz',
      sid: '-g40i96:/src/babel/__tests__/fixtures/debug-sids.js:baz',
    },
  )

  const f = () =>
    createEvent({
      name: 'f',
      sid: '-r9h70a:/src/babel/__tests__/fixtures/debug-sids.js:f',
    })

  const {sid} = createEvent({
    sid: '-qcp750:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  const {name} = createEvent('foo', {
    sid: '-pvnkpy:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  const {shortName} = createEvent(
    {
      name: 'foo',
    },
    {
      sid: '-pelxpd:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
    },
  )
  createEvent({
    sid: '-omers5:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
  createEvent({
    sid: '-o9ri4u:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
}
{
  const foo = createEvent({
    name: 'foo',
    sid: 'b5uuw9:/src/babel/__tests__/fixtures/debug-sids.js:foo',
  })
  const a = restore(foo, null, {
    name: 'a',
    sid: 'nn9or3:/src/babel/__tests__/fixtures/debug-sids.js:a',
  })
  const b = restore(foo, null, {
    and: {},
    name: 'b',
    sid: 'vd3dfx:/src/babel/__tests__/fixtures/debug-sids.js:b',
  })
  const c = restore(foo, null, {
    and: 23020,
    name: 'c',
    sid: '-vh5dg6:/src/babel/__tests__/fixtures/debug-sids.js:c',
  })
  const config = {
    option: 0,
  }
  const dod = restore(foo, null, {
    and: config,
    name: 'dod',
    sid: '-vclm8o:/src/babel/__tests__/fixtures/debug-sids.js:dod',
  })

  const f = a =>
    restore(foo, null, {
      name: 'f',
      sid: '-m02imo:/src/babel/__tests__/fixtures/debug-sids.js:f',
    })

  const {sid} = restore(foo, null, {
    sid: '-m6nww7:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  const {shortName} = restore(foo, null, {
    and: {
      name: 'bar',
    },
    sid: '-lpm9ur:/src/babel/__tests__/fixtures/debug-sids.js:undefined',
  })
  restore(foo, null, {
    sid: '-hqr1z7:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
  restore(foo, null, {
    sid: '-he3sbw:/src/babel/__tests__/fixtures/debug-sids.js:',
  })
}
"
`;

exports[`babel-plugin should default factories 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/default-factories.js'
import {withFactory as _withFactory} from 'effector'
import {createQuery} from '@farfetched/core'
import {debounce} from 'patronum'
import {delay} from 'patronum/delay'

const q = _withFactory({
  sid: '-8gjzqm',
  fn: () =>
    createQuery({
      handler: async () => null,
    }),
  name: 'q',
  method: 'createQuery',
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
})

_withFactory({
  sid: '-d76u2e',
  fn: () =>
    debounce({
      source: q,
      timeout: 100,
      target: q.refresh,
    }),
  name: 'none',
  method: 'debounce',
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 0,
  },
})

_withFactory({
  sid: 'e9kkk1',
  fn: () =>
    delay({
      source: q,
      timeout: 100,
      target: q.refresh,
    }),
  name: 'none',
  method: 'delay',
  loc: {
    file: _effectorFileName,
    line: 13,
    column: 0,
  },
})
"
`;

exports[`babel-plugin should factories 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/factories.js'
import {withFactory as _withFactory2} from 'effector'
import {a} from '../a'
import {a1} from './a'
import {b} from './b'
import {c} from 'c/d'
import {e} from '~/e'
import {f} from '@/f'
import f1 from '@/f'
import {g} from '../g'
import {g1} from '../g.ts'
import {g2} from './g.ts'
const withFactory = 1
const _withFactory = 2

const a_val = _withFactory2({
  sid: 'f933k3',
  fn: () => a(0),
  name: 'a_val',
  method: 'a',
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 14,
  },
})

const a1_val = a1(0)

const b_val = _withFactory2({
  sid: 'qmj9c2',
  fn: () => b(0),
  name: 'b_val',
  method: 'b',
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 14,
  },
})

const c_val = _withFactory2({
  sid: '-xi699a',
  fn: () => c(0),
  name: 'c_val',
  method: 'c',
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 14,
  },
})

const e_val = _withFactory2({
  sid: '-c6esvx',
  fn: () => e(0),
  name: 'e_val',
  method: 'e',
  loc: {
    file: _effectorFileName,
    line: 19,
    column: 14,
  },
})

const f_val = _withFactory2({
  sid: '8nxsry',
  fn: () => f(0),
  name: 'f_val',
  method: 'f',
  loc: {
    file: _effectorFileName,
    line: 20,
    column: 14,
  },
})

const f1_val = _withFactory2({
  sid: 'zg3bgx',
  fn: () => f1(0),
  name: 'f1_val',
  method: 'default',
  loc: {
    file: _effectorFileName,
    line: 21,
    column: 15,
  },
})

const g_val = _withFactory2({
  sid: 'k1dyjx',
  fn: () => g(0),
  name: 'g_val',
  method: 'g',
  loc: {
    file: _effectorFileName,
    line: 22,
    column: 14,
  },
})

const g1_val = _withFactory2({
  sid: '4gqp0u',
  fn: () => g1(0),
  name: 'g1_val',
  method: 'g1',
  loc: {
    file: _effectorFileName,
    line: 23,
    column: 15,
  },
})

const g2_val = g2(0)

const {foo, bar} = _withFactory2({
  sid: '-bpn650',
  fn: () => a(0),
  name: 'none',
  method: 'a',
  loc: {
    file: _effectorFileName,
    line: 25,
    column: 19,
  },
})
"
`;

exports[`babel-plugin should factories only with name with options 1`] = `
"import {withFactory as _withFactory} from 'effector'
import {itIsALongName, Randomizing} from 'c/d'
import Defaulting, {AnotherImport} from '@/f'
import {splitMap} from 'patronum/split-map'

const longer = _withFactory({
  sid: 'sxdi9p',
  fn: () => itIsALongName(0),
  name: 'longer',
  method: 'itIsALongName',
})

const arcade = _withFactory({
  sid: '-rwb2il',
  fn: () =>
    Defaulting({
      source: longer,
      condition: _withFactory({
        sid: '-6rcqb6',
        fn: () =>
          AnotherImport({
            test: true,
          }),
        name: 'condition',
        method: 'AnotherImport',
      }),
    }),
  name: 'arcade',
  method: 'default',
})

_withFactory({
  sid: '-dr78v0',
  fn: () =>
    Randomizing({
      arcade,
    }),
  name: 'none',
  method: 'Randomizing',
})

const result = _withFactory({
  sid: '-fbu55p',
  fn: () =>
    splitMap({
      longer,
      source: arcade,
    }),
  name: 'result',
  method: 'splitMap',
})
"
`;

exports[`babel-plugin should factories without name with options 1`] = `
"import {withFactory as _withFactory} from 'effector'
import {itIsALongName, Randomizing} from 'c/d'
import Defaulting, {AnotherImport} from '@/f'
import {splitMap} from 'patronum/split-map'

const longer = _withFactory({
  sid: 'mn9l4u',
  fn: () => itIsALongName(0),
})

const arcade = _withFactory({
  sid: 'xpbz5w',
  fn: () =>
    Defaulting({
      source: longer,
      condition: _withFactory({
        sid: 'lijhe7',
        fn: () =>
          AnotherImport({
            test: true,
          }),
      }),
    }),
})

_withFactory({
  sid: '-yfq3bv',
  fn: () =>
    Randomizing({
      arcade,
    }),
})

const result = _withFactory({
  sid: 'lwwnia',
  fn: () =>
    splitMap({
      longer,
      source: arcade,
    }),
})
"
`;

exports[`babel-plugin should forward 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/forward.js'
import {createStore, createEvent, forward} from 'effector'
const foo = createStore('foo', {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'b2bfdg',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-tj0e4a',
})
const baz1 = forward({
  and: {
    from: foo,
    to: bar,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    name: 'baz1',
    sid: '-jxxvds',
  },
})
const baz2 = forward({
  and: {
    from: foo,
    to: bar,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 13,
    },
    name: 'baz2',
    sid: '-ng3uxu',
  },
})
forward({
  and: {
    from: foo,
    to: bar,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 0,
    },
    sid: '-dp41tl',
  },
})
forward({
  and: {
    from: foo,
    to: bar,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 13,
      column: 0,
    },
    sid: '-dok988',
  },
})
const config = {
  from: foo,
  to: bar,
}
const baz5 = forward({
  and: config,
  or: {
    loc: {
      file: _effectorFileName,
      line: 23,
      column: 13,
    },
    name: 'baz5',
    sid: '-u8jxfp',
  },
})

const f = () =>
  forward({
    and: {
      from: foo,
      to: bar,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 26,
        column: 2,
      },
      name: 'f',
      sid: '798vsy',
    },
  })

{
  const incorrect = forward({
    from: foo,
    to: bar,
  })

  function forward() {}
}
{
  const forward = () => {}

  if (true) {
    const incorrect = forward({
      from: foo,
      to: bar,
    })
  }
}
"
`;

exports[`babel-plugin should guard 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/guard.js'
import {createStore, createEvent, guard} from 'effector'
const foo = createStore(true, {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'lecs4',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-45cu8q',
})
const baz1 = guard({
  and: [
    bar,
    {
      filter: foo,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    name: 'baz1',
    sid: 'ajzcsg',
  },
})
const baz2 = guard({
  and: [
    {
      source: bar,
      filter: foo,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 13,
    },
    name: 'baz2',
    sid: 'r2agou',
  },
})
guard({
  and: [
    bar,
    {
      filter: foo,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 0,
    },
    sid: '-ajy521',
  },
})
guard({
  and: [
    {
      source: bar,
      filter: foo,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 13,
      column: 0,
    },
    sid: '-ajecgo',
  },
})
const spread = [
  bar,
  {
    filter: foo,
  },
]
const baz4 = guard({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 13,
    },
    name: 'baz4',
    sid: '-ocyuy5',
  },
})
const config = {
  source: bar,
  filter: foo,
}
const baz5 = guard({
  and: [config],
  or: {
    loc: {
      file: _effectorFileName,
      line: 26,
      column: 13,
    },
    name: 'baz5',
    sid: '-b8br2g',
  },
})

const f = () =>
  guard({
    and: [
      {
        source: bar,
        filter: foo,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 29,
        column: 2,
      },
      name: 'f',
      sid: '-83rmcb',
    },
  })

{
  const incorrect = guard(bar, {
    filter: foo,
  })

  function guard() {}
}
{
  const guard = () => {}

  if (true) {
    const incorrect = guard(bar, {
      filter: foo,
    })
  }
}
"
`;

exports[`babel-plugin should import from another packages 1`] = `
"var _effectorFileName =
  '/src/babel/__tests__/fixtures/import-from-another-packages.js'
import merge from 'mergedeep'
import {createStore} from 'redux'
const example = merge([a, b])
const store = createStore(0)
"
`;

exports[`babel-plugin should imports 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/imports.js'
import {
  createStore as createStoreEffector,
  attach as attachEffector,
  clearNode as clearNodeEffector,
  combine as combineEffector,
  createApi as createApiEffector,
  createDomain as createDomainEffector,
  createEffect as createEffectEffector,
  createNode as createNodeEffector,
  createEvent as createEventEffector,
  forward as forwardEffector,
  fromObservable as fromObservableEffector,
  guard as guardEffector,
  launch as launchEffector,
  merge as mergeEffector,
  restore as restoreEffector,
  sample as sampleEffector,
  split as splitEffector,
  withRegion as withRegionEffector,
  hydrate as hydrateEffector,
  serialize as serializeEffector,
  scopeBind as scopeBindEffector,
  fork as forkEffector,
  allSettled as allSettledEffector,
} from 'effector'
import {createStore} from 'redux'
{
  const domain = createDomainEffector({
    loc: {
      file: _effectorFileName,
      line: 29,
      column: 17,
    },
    name: 'domain',
    sid: '1vn09w',
  })
  const event = createEventEffector({
    loc: {
      file: _effectorFileName,
      line: 30,
      column: 16,
    },
    name: 'event',
    sid: '-m5d723',
  })
  const store = createStoreEffector(0, {
    loc: {
      file: _effectorFileName,
      line: 31,
      column: 16,
    },
    name: 'store',
    sid: '1vy7fv',
  })
  const effect = createEffectEffector({
    loc: {
      file: _effectorFileName,
      line: 32,
      column: 17,
    },
    name: 'effect',
    sid: '-ii0up3',
  })
  const domainEvent = domain.createEvent({
    loc: {
      file: _effectorFileName,
      line: 33,
      column: 22,
    },
    name: 'domainEvent',
    sid: 'up7n43',
  })
  const scope = forkEffector(domain)
  const node = createNodeEffector()
  const a = attachEffector({
    and: {
      effect,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 37,
        column: 12,
      },
      name: 'a',
      sid: '-2lozrr',
    },
  })
  const b = clearNodeEffector(node)
  const c = combineEffector({
    and: [
      {
        store,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 39,
        column: 12,
      },
      name: 'c',
      sid: '-z7de1j',
    },
  })
  const d = createApiEffector({
    and: [store, {}],
    or: {
      loc: {
        file: _effectorFileName,
        line: 40,
        column: 12,
      },
      sid: '-xc0sb4',
    },
  })
  const j = forwardEffector({
    and: {
      from: event,
      to: store,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 41,
        column: 12,
      },
      name: 'j',
      sid: '-z6uqpz',
    },
  })
  const l = guardEffector({
    and: [
      {
        source: event,
        filter: Boolean,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 42,
        column: 12,
      },
      name: 'l',
      sid: '2rjal6',
    },
  })
  const m = launchEffector(event, null)
  const n = mergeEffector([event], {
    loc: {
      file: _effectorFileName,
      line: 44,
      column: 12,
    },
    name: 'n',
    sid: '-tu53om',
  })
  const o = restoreEffector(event, null, {
    loc: {
      file: _effectorFileName,
      line: 45,
      column: 12,
    },
    name: 'o',
    sid: '-amf9ty',
  })
  const p = sampleEffector({
    and: [
      {
        source: store,
        clock: event,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 46,
        column: 12,
      },
      name: 'p',
      sid: '8lak0q',
    },
  })
  const q = splitEffector({
    and: [event, {}],
    or: {
      loc: {
        file: _effectorFileName,
        line: 47,
        column: 12,
      },
      sid: '-u0pfjr',
    },
  })
  const r = withRegionEffector(node, () => {})
  const s = hydrateEffector(scope, {
    values: {},
  })
  const t = serializeEffector(scope)
  const u = scopeBindEffector(domainEvent)
  const w = allSettledEffector(domainEvent, {
    scope,
  })
}

function nameClashCheck() {
  const domain = createDomain()
  const event = createEvent()
  const store = createStore(0)
  const effect = createEffect()
  const domainEvent = domain.createEvent({
    loc: {
      file: _effectorFileName,
      line: 60,
      column: 22,
    },
    name: 'domainEvent',
    sid: '2a5kmh',
  })
  const scope = fork(domain)
  const node = createNode()
  const a = attach({
    effect,
  })
  const b = clearNode(node)
  const c = combine({
    store,
  })
  const d = createApi(store, {})
  const j = forward({
    from: event,
    to: store,
  })
  const l = guard({
    source: event,
    filter: Boolean,
  })
  const m = launch(event, null)
  const n = merge([event])
  const o = restore(event, null)
  const p = sample({
    source: store,
    clock: event,
  })
  const q = split(event, {})
  const r = withRegion(node, () => {})
  const s = hydrate(scope, {
    values: {},
  })
  const t = serialize(scope)
  const u = scopeBind(domainEvent)
  const w = allSettled(domainEvent, {
    scope,
  })
}

const reduxStore = createStore(() => 0)
import {
  createStore as attach,
  createStore as clearNode,
  createStore as combine,
  createStore as createApi,
  createStore as createDomain,
  createStore as createEffect,
  createStore as createNode,
  createStore as createEvent,
  createStore as forward,
  createStore as fromObservable,
  createStore as guard,
  createStore as launch,
  createStore as merge,
  createStore as restore,
  createStore as sample,
  createStore as split,
  createStore as withRegion,
  createStore as hydrate,
  createStore as serialize,
  createStore as scopeBind,
  createStore as fork,
  createStore as allSettled,
} from 'redux'
"
`;

exports[`babel-plugin should imports globals 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/imports-globals.js'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 1,
    column: 15,
  },
  name: 'domain',
  sid: '10o82x',
})
const event = createEvent({
  loc: {
    file: _effectorFileName,
    line: 2,
    column: 14,
  },
  name: 'event',
  sid: 'q4qjpv',
})
const store = createStore(0, {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 14,
  },
  name: 'store',
  sid: 'iq0y2z',
})
const effect = createEffect({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 15,
  },
  name: 'effect',
  sid: '-mo4l0n',
})
const domainEvent = domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 20,
  },
  name: 'domainEvent',
  sid: 't0scbd',
})
const scope = fork(domain)
const node = createNode()
const a = attach({
  and: {
    effect,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 9,
      column: 10,
    },
    name: 'a',
    sid: '-27a7xz',
  },
})
const b = clearNode(node)
const c = combine({
  and: [
    {
      store,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 11,
      column: 10,
    },
    name: 'c',
    sid: '-vtehbg',
  },
})
const d = createApi({
  and: [store, {}],
  or: {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 10,
    },
    sid: '6v1ads',
  },
})
const e = forward({
  and: {
    from: event,
    to: store,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 13,
      column: 10,
    },
    name: 'e',
    sid: '-llhht8',
  },
})
const f = guard({
  and: [
    {
      source: event,
      filter: Boolean,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 14,
      column: 10,
    },
    name: 'f',
    sid: '-ghj024',
  },
})
const g = launch(event, null)
const h = merge([event], {
  loc: {
    file: _effectorFileName,
    line: 16,
    column: 10,
  },
  name: 'h',
  sid: '-69m0jw',
})
const i = restore(event, null, {
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 10,
  },
  name: 'i',
  sid: '-15niss',
})
const j = sample({
  and: [
    {
      source: store,
      clock: event,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 18,
      column: 10,
    },
    name: 'j',
    sid: '3yayyc',
  },
})
const k = split({
  and: [event, {}],
  or: {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 10,
    },
    sid: 'a6cn55',
  },
})
const l = withRegion(node, () => {})
const n = hydrate(scope, {
  values: {},
})
const o = serialize(scope)
const p = scopeBind(domainEvent)
const q = allSettled(domainEvent, {
  scope,
})
"
`;

exports[`babel-plugin should localVariables 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/localVariables.js'
import {createEvent} from 'effector'

function A() {
  const createEvent = 123
}

function B() {
  return createEvent({
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 9,
    },
    sid: '2wwj9e',
  })
}
"
`;

exports[`babel-plugin should merge 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/merge.js'
import {createEvent, merge} from 'effector'
const foo = createEvent({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'wn2htt',
})
const a = merge([foo], {
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'a',
  sid: 'g0hdc6',
})
const b = merge([foo], {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 10,
  },
  name: 'b',
  sid: 'wish8k',
})
const {sid} = merge([foo], {
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 14,
  },
  sid: '-g39k5r',
})
merge([foo], {
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 0,
  },
  sid: '-1h8qvs',
})
const args = [[foo]]
const c = merge(...args, {
  loc: {
    file: _effectorFileName,
    line: 13,
    column: 10,
  },
  name: 'c',
  sid: 'er2f95',
})
{
  const incorrect = merge([foo])

  function merge() {}
}
{
  const merge = () => {}

  if (true) {
    const incorrect = merge([foo])
  }
}
"
`;

exports[`babel-plugin should references 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/references.js'

function outerScope() {
  const createDomain = bar
  const createEvent = bar
  const createStore = foo
  const createEffect = foo
  const fork = foo
  const createNode = foo
  const attach = foo
  const clearNode = foo
  const combine = foo
  const createApi = foo
  const forward = foo
  const guard = foo
  const launch = foo
  const merge = foo
  const restore = foo
  const sample = foo
  const split = foo
  const withRegion = foo
  const hydrate = foo
  const serialize = foo
  const scopeBind = foo
  const allSettled = foo

  function nameClashCheck() {
    const domain = createDomain()
    const event = createEvent()
    const store = createStore(0)
    const effect = createEffect()
    const domainEvent = domain.createEvent({
      loc: {
        file: _effectorFileName,
        line: 29,
        column: 24,
      },
      name: 'domainEvent',
      sid: 'pmdftk',
    })
    const scope = fork(domain)
    const node = createNode()
    const a = attach({
      effect,
    })
    const b = clearNode(node)
    const c = combine({
      store,
    })
    const d = createApi(store, {})
    const e = forward({
      from: event,
      to: store,
    })
    const f = guard({
      source: event,
      filter: Boolean,
    })
    const g = launch(event, null)
    const h = merge([event])
    const i = restore(event, null)
    const j = sample({
      source: store,
      clock: event,
    })
    const k = split(event, {})
    const l = withRegion(node, () => {})
    const n = hydrate(scope, {
      values: {},
    })
    const o = serialize(scope)
    const p = scopeBind(domainEvent)
    const q = allSettled(domainEvent, {
      scope,
    })
  }
}

function foo() {}

const bar = () => {}
"
`;

exports[`babel-plugin should restore 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/restore.js'
import {createEvent, restore} from 'effector'
const foo = createEvent({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'uhrqqz',
})
const a = restore(foo, null, {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 10,
  },
  name: 'a',
  sid: '-nnytgv',
})
const b = restore(foo, null, {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'b',
  sid: '-r64t0x',
})
const c = restore(foo, null, {
  and: 23020,
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 10,
  },
  name: 'c',
  sid: '-uoaskz',
})
const config = {
  option: 0,
}
const dod = restore(foo, null, {
  and: config,
  loc: {
    file: _effectorFileName,
    line: 8,
    column: 12,
  },
  name: 'dod',
  sid: '-juogjx',
})

const f = a =>
  restore(foo, null, {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 15,
    },
    name: 'f',
    sid: 'sesimo',
  })

const {sid} = restore(foo, null, {
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 14,
  },
  sid: 'cwg5ax',
})
const {shortName} = restore(foo, null, {
  and: {
    name: 'bar',
  },
  loc: {
    file: _effectorFileName,
    line: 13,
    column: 20,
  },
  sid: 'ddhscd',
})
restore(foo, null, {
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 0,
  },
  sid: '5rznc1',
})
restore(foo, null, {
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 0,
  },
  sid: '5t38ir',
})
{
  const incorrect = restore(foo, null)

  function restore() {}
}
{
  const restore = () => {}

  if (true) {
    const incorrect = restore(foo, null)
  }
}
"
`;

exports[`babel-plugin should sample 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/sample.js'
import {createStore, createEvent, sample} from 'effector'
const foo = createStore('foo', {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '-4vbj4l',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-o1v4q1',
})
const baz1 = sample({
  and: [foo, bar],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    name: 'baz1',
    sid: '-mtqqy1',
  },
})
const baz2 = sample({
  and: [
    {
      source: foo,
      clock: bar,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 13,
    },
    name: 'baz2',
    sid: '-mhbfpl',
  },
})
sample({
  and: [foo, bar],
  or: {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 0,
    },
    sid: 'u64ez6',
  },
})
sample({
  and: [
    {
      source: foo,
      clock: bar,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 13,
      column: 0,
    },
    sid: 'u6o7kj',
  },
})
const spread = [foo, bar]
const baz4 = sample({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 13,
    },
    name: 'baz4',
    sid: '-59j5hm',
  },
})
const config = {
  source: foo,
  clock: bar,
}
const baz5 = sample({
  and: [config],
  or: {
    loc: {
      file: _effectorFileName,
      line: 26,
      column: 13,
    },
    name: 'baz5',
    sid: '40inll',
  },
})

const f = () =>
  sample({
    and: [
      {
        source: foo,
        clock: bar,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 29,
        column: 2,
      },
      name: 'f',
      sid: 'hnsza4',
    },
  })

{
  const incorrect = sample(config)

  function sample() {}
}
{
  const sample = () => {}

  if (true) {
    const incorrect = sample(config)
  }
}
"
`;

exports[`babel-plugin should split 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/split.js'
import {createStore, createEvent, split} from 'effector'
const foo = createStore([], {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '-qfptup',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-v6h0vj',
})
const baz1 = split({
  and: [
    foo,
    {
      nonEmpty: list => list.length === 0,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    sid: '-zbcafz',
  },
})
split({
  and: [
    foo,
    {
      nonEmpty: list => list.length === 0,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 0,
    },
    sid: '-14glo8',
  },
})
const baz2 = split({
  and: [
    {
      source: foo,
      match: {
        nonEmpty: list => list.length === 0,
      },
      cases: {
        nonEmpty: bar,
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 13,
    },
    sid: '-yd91nl',
  },
})
split({
  and: [
    {
      source: foo,
      match: {
        nonEmpty: list => list.length === 0,
      },
      cases: {
        nonEmpty: bar,
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 14,
      column: 0,
    },
    sid: 'xh5bh0',
  },
})
const spread = [
  foo,
  {
    nonEmpty: list => list.length === 0,
  },
]
const baz4 = split({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 21,
      column: 13,
    },
    sid: '-efuj54',
  },
})
const config = {
  source: foo,
  match: {
    nonEmpty: list => list.length === 0,
  },
  cases: {
    nonEmpty: bar,
  },
}
const baz5 = split({
  and: [config],
  or: {
    loc: {
      file: _effectorFileName,
      line: 29,
      column: 13,
    },
    sid: '-anhjzk',
  },
})

const f = () =>
  split({
    and: [
      foo,
      {
        nonEmpty: list => list.length === 0,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 31,
        column: 16,
      },
      sid: '8jr5i',
    },
  })

{
  const incorrect = split({
    source: foo,
    match: {
      nonEmpty: list => list.length === 0,
    },
    cases: {
      nonEmpty: bar,
    },
  })

  function split() {}
}
{
  const split = () => {}

  if (true) {
    const incorrect = split({
      source: foo,
      match: {
        nonEmpty: list => list.length === 0,
      },
      cases: {
        nonEmpty: bar,
      },
    })
  }
}
"
`;

exports[`babel-plugin should units without name with options 1`] = `
"import {
  createDomain,
  createEffect,
  createEvent,
  createStore,
  restore,
} from 'effector'
{
  const domain = createDomain({
    sid: '-nzaa7a',
  })
  const a = domain.store('bar', {
    sid: '-r4da5h',
  })
  const b = domain.store('h', {
    and: {
      option: 'test',
      ['na' + 'me']: 'LOL',
    },
    sid: 'ehfy55',
  })
  const c = domain.store('h', {
    and: {
      name: 'test',
    },
    sid: '-exuvjd',
  })
  const d = domain.store('h', {
    and: null,
    sid: 'r4zz5g',
  })
  const e = domain.store('h', {
    and: 4234,
    sid: '-1t984v',
  })
  const f = domain.store('h', {
    and: {},
    sid: '-v8k1td',
  })
  const aAlias = domain.createStore('bar', {
    sid: 'rsi1ca',
  })
  const bAlias = domain.createStore('h', {
    and: {
      option: 'test',
      ['na' + 'me']: 'LOL',
    },
    sid: 'i7igmi',
  })
  const cAlias = domain.createStore('h', {
    and: {
      name: 'testAlias',
    },
    sid: '8mivwq',
  })
  const dAlias = domain.createStore('h', {
    and: null,
    sid: '-hf2ev',
  })
  const eAlias = domain.createStore('h', {
    and: 4234,
    sid: '-9ld0qg',
  })
  const fAlias = domain.createStore('h', {
    and: {},
    sid: '-j6clg8',
  })
  const {sid} = domain.createStore(null, {
    sid: '-ls4ila',
  })
  const {shortName} = domain.createStore(null, {
    and: {
      name: 'foo',
    },
    sid: '-lb2vju',
  })
  domain.createStore(null, {
    sid: 'tgv4rt',
  })
  domain.createStore(null, {
    sid: 'thypyj',
  })
}
{
  const foo = createEffect({
    sid: '9vguxc',
  })
  const bar = createEffect('hello', {
    sid: '-t87e9q',
  })
  const baz = createEffect(
    {
      handler() {
        return 0
      },
    },
    {
      sid: 'g6ivfd',
    },
  )
  const quux = createEffect('nice', {
    and: {
      handler() {
        return 0
      },
    },
    sid: '-26njv2',
  })

  const fa = () =>
    createEffect({
      sid: 'nsvob9',
    })

  const {sid} = createEffect({
    sid: 'ixqzbg',
  })
  const {name} = createEffect('foo', {
    sid: 'jeslqi',
  })
  const {shortName} = createEffect(
    {
      name: 'foo',
    },
    {
      sid: 'jvu8r3',
    },
  )
  createEffect({
    sid: 'uh5jxn',
  })
  createEffect({
    sid: 'ui954d',
  })
}
{
  const foo = createStore('foo', {
    sid: '-jyq2qv',
  })
  const a = createStore('h', {
    sid: '-oagam9',
  })
  const b = createStore('h', {
    and: {},
    sid: 'hbcxod',
  })
  const c = createStore('h', {
    and: 23020,
    sid: '-bmw9ly',
  })
  const config = {
    option: 0,
  }
  const dod = createStore(null, {
    and: config,
    sid: 'sja6dc',
  })

  const f = a =>
    createStore(a, {
      sid: '-sen25u',
    })

  const {sid} = createStore(null, {
    sid: '-mqki7m',
  })
  const {shortName} = createStore(null, {
    and: {
      name: 'foo',
    },
    sid: '-m9iv66',
  })
  createStore(null, {
    sid: 'vep04o',
  })
  createStore(null, {
    sid: 'vfslbe',
  })
}
{
  const foo = createEvent({
    sid: '8x0vb0',
  })
  const bar = createEvent('hello', {
    sid: '-u6ndw2',
  })
  const baz = createEvent(
    {
      name: 'nice',
    },
    {
      sid: 'f82vt1',
    },
  )

  const f = () =>
    createEvent({
      sid: '-1w4823',
    })

  const {sid} = createEvent({
    sid: '-65zqet',
  })
  const {name} = createEvent('foo', {
    sid: '-5oy3zr',
  })
  const {shortName} = createEvent(
    {
      name: 'foo',
    },
    {
      sid: '-57wgz6',
    },
  )
  createEvent({
    sid: 'vyhlho',
  })
  createEvent({
    sid: 'wb4v4z',
  })
}
{
  const foo = createEvent({
    sid: 'pyn9i0',
  })
  const a = restore(foo, null, {
    sid: 'lmx1mm',
  })
  const b = restore(foo, null, {
    and: {},
    sid: '-7sds1w',
  })
  const c = restore(foo, null, {
    and: 23020,
    sid: 'yah2mx',
  })
  const config = {
    option: 0,
  }
  const dod = restore(foo, null, {
    and: config,
    sid: '10dc0p',
  })

  const f = a =>
    restore(foo, null, {
      sid: '-gu50wv',
    })

  const {sid} = restore(foo, null, {
    sid: 'zcd1uy',
  })
  const {shortName} = restore(foo, null, {
    and: {
      name: 'bar',
    },
    sid: '-z7pd2q',
  })
  restore(foo, null, {
    sid: 'vif224',
  })
  restore(foo, null, {
    sid: 'vv2bpf',
  })
}
"
`;

exports[`babel-plugin support multiple passes of babel plugin 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/multiPass.js',
  _effectorFileName2 = '/src/babel/__tests__/fixtures/multiPass.js'
import {
  attach,
  combine,
  createDomain,
  createEffect,
  createEvent,
  createStore,
  createApi,
  forward,
  guard,
  merge,
  restore,
  sample,
  split,
} from 'effector'
const korben = attach({
  and: {
    and: {
      effect() {},
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 17,
        column: 15,
      },
      name: 'korben',
      sid: '-5ddctg',
    },
  },
  or: {
    loc: {
      file: _effectorFileName2,
      line: 17,
      column: 15,
    },
    name: 'korben',
    sid: '-5ddctg',
  },
})
const dallas = combine({
  and: [
    {
      and: [{}, () => {}],
      or: {
        loc: {
          file: _effectorFileName,
          line: 18,
          column: 15,
        },
        name: 'dallas',
        sid: '-2wtc0j',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 18,
      column: 15,
    },
    name: 'dallas',
    sid: '-2wtc0j',
  },
})
const c = createDomain(
  {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 10,
    },
    name: 'c',
    sid: 't890l',
  },
  {
    loc: {
      file: _effectorFileName2,
      line: 19,
      column: 10,
    },
    name: 'c',
    sid: 't890l',
  },
)
const d = createEffect(
  {
    loc: {
      file: _effectorFileName,
      line: 20,
      column: 10,
    },
    name: 'd',
    sid: '-km6xbk',
  },
  {
    loc: {
      file: _effectorFileName2,
      line: 20,
      column: 10,
    },
    name: 'd',
    sid: '-km6xbk',
  },
)
const e = createEvent(
  {
    loc: {
      file: _effectorFileName,
      line: 21,
      column: 10,
    },
    name: 'e',
    sid: 'j1jw1c',
  },
  {
    loc: {
      file: _effectorFileName2,
      line: 21,
      column: 10,
    },
    name: 'e',
    sid: 'j1jw1c',
  },
)
const f = createStore(null, {
  and: {
    loc: {
      file: _effectorFileName,
      line: 22,
      column: 10,
    },
    name: 'f',
    sid: '-cbtckw',
  },
  loc: {
    file: _effectorFileName2,
    line: 22,
    column: 10,
  },
  name: 'f',
  sid: '-cbtckw',
})
const g = createApi({
  and: [
    {
      and: [f, {}],
      or: {
        loc: {
          file: _effectorFileName,
          line: 23,
          column: 10,
        },
        sid: '-v3udvb',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 23,
      column: 10,
    },
    sid: '-v3udvb',
  },
})
const h = forward({
  and: {
    and: {
      from: d,
      to: e,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 24,
        column: 10,
      },
      name: 'h',
      sid: '-41fru8',
    },
  },
  or: {
    loc: {
      file: _effectorFileName2,
      line: 24,
      column: 10,
    },
    name: 'h',
    sid: '-41fru8',
  },
})
const i = guard({
  and: [
    {
      and: [
        e,
        {
          filter: Boolean,
        },
      ],
      or: {
        loc: {
          file: _effectorFileName,
          line: 25,
          column: 10,
        },
        name: 'i',
        sid: '-zet0gg',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 25,
      column: 10,
    },
    name: 'i',
    sid: '-zet0gg',
  },
})
const j = merge([e], {
  and: {
    loc: {
      file: _effectorFileName,
      line: 26,
      column: 10,
    },
    name: 'j',
    sid: '48xswg',
  },
  loc: {
    file: _effectorFileName2,
    line: 26,
    column: 10,
  },
  name: 'j',
  sid: '48xswg',
})
const k = restore(d, null, {
  and: {
    loc: {
      file: _effectorFileName,
      line: 27,
      column: 10,
    },
    name: 'k',
    sid: '-r4ffps',
  },
  loc: {
    file: _effectorFileName2,
    line: 27,
    column: 10,
  },
  name: 'k',
  sid: '-r4ffps',
})
const m = sample({
  and: [
    {
      and: [
        {
          clock: e,
          source: f,
        },
      ],
      or: {
        loc: {
          file: _effectorFileName,
          line: 28,
          column: 10,
        },
        name: 'm',
        sid: '-jb3hdb',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 28,
      column: 10,
    },
    name: 'm',
    sid: '-jb3hdb',
  },
})
const n = split({
  and: [
    {
      and: [f, {}],
      or: {
        loc: {
          file: _effectorFileName,
          line: 29,
          column: 10,
        },
        sid: '-s9kni5',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 29,
      column: 10,
    },
    sid: '-s9kni5',
  },
})
"
`;
