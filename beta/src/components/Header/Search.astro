---
import { getPathParamsFromId, getTextLocalized as t, translations } from "../../languages";
import "@pagefind/default-ui/css/ui.css";

const { lang } = getPathParamsFromId(Astro.url.pathname);
const pagefindTranslations = Object.fromEntries(
  Object.entries(translations.Pagefind).map(([key, value]) => [key, t(value, lang)]),
);
---

<site-search data-translations={JSON.stringify(pagefindTranslations)}>
  <button data-open-modal disabled type="button" class="search-input">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="18"
      height="18"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      fill="none"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
      <circle cx="10" cy="10" r="7"></circle>
      <line x1="21" y1="21" x2="15" y2="15"></line>
    </svg>

    <span class="search-text">Search</span>

    <span class="search-hint">
      <span class="sr-only">Press</span>

      <kbd>âŒ˜</kbd>
      <kbd>K</kbd>

      <span class="sr-only"> to search</span>
    </span>
  </button>

  <dialog aria-label={t(translations.Search.label, lang)}>
    <div class="dialog-frame">
      {
        import.meta.env.DEV && !import.meta.env.PUBLIC_SEARCH ? (
          <div class="m-auto whitespace-pre-line text-center" dir="ltr">
            <p>{t(translations.Search.devWarning, lang)}</p>
          </div>
        ) : (
          <div id="pagefind__search" />
        )
      }
    </div>
  </dialog>
</site-search>

<script>
  class SiteSearch extends HTMLElement {
    openBtn: HTMLButtonElement;
    dialog: HTMLDialogElement;
    dialogFrame: Element;

    constructor() {
      super();
      this.openBtn = this.querySelector("button[data-open-modal]")!;
      this.dialog = this.querySelector("dialog")!;
      this.dialogFrame = this.querySelector(".dialog-frame")!;

      /** Close the modal if a user clicks outside of the modal. */
      const onWindowClick = (event: MouseEvent) => {
        if (
          document.body.contains(event.target as Node) &&
          !this.dialogFrame.contains(event.target as Node)
        )
          closeModal();
      };

      const focusInput = () => {
        this.querySelector("input")?.focus();
      };

      const openModal = (event?: MouseEvent) => {
        this.dialog.showModal();
        document.body.classList.add("search-dialog-open");
        focusInput();
        event?.stopPropagation();
        window.addEventListener("click", onWindowClick);
      };

      const closeModal = () => {
        this.dialog.close();
      };

      this.openBtn.addEventListener("click", openModal);
      this.openBtn.disabled = false;

      const onDialogClose = () => {
        document.body.classList.remove("search-dialog-open");
        window.removeEventListener("click", onWindowClick);
      };
      this.dialog.addEventListener("close", onDialogClose);
      this.dialog.addEventListener("cancel", onDialogClose);

      // Listen for `/` and `cmd + k` keyboard shortcuts.
      window.addEventListener("keydown", (e) => {
        if (e.metaKey === true && e.key === "k") {
          this.dialog.open ? closeModal() : openModal();
          e.preventDefault();
        } else if (e.key === "/" && !this.dialog.open) {
          openModal();
          e.preventDefault();
        }
      });

      let translations = {};
      try {
        translations = JSON.parse(this.dataset.translations || "{}");
      } catch {}

      window.addEventListener("DOMContentLoaded", () => {
        if (import.meta.env.DEV && !import.meta.env.PUBLIC_SEARCH) return;

        const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
        onIdle(async () => {
          const { PagefindUI } = await import("@pagefind/default-ui");
          new PagefindUI({
            element: "#pagefind__search",
            baseUrl: import.meta.env.BASE_URL,
            bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/_pagefind/",
            showImages: false,
            translations,
            resetStyles: false,
          });
          if (this.dialog.open) {
            focusInput();
          }
        });
      });
    }
  }
  customElements.define("site-search", SiteSearch);
</script>

<style>
  .search-input {
    @apply m-0 box-border flex cursor-pointer rounded-2xl px-2 py-1 outline-0;

    transition-property: border-color, color, background-color;
    transition-duration: 0.2s;
    transition-timing-function: ease-out;

    background-color: var(--theme-divider);
    color: var(--theme-text-light);
    overflow: visible;

    font-family: inherit;
    font-size: 0.9rem;
    font-weight: 500;
    line-height: inherit;
    -webkit-font-smoothing: antialiased;
  }

  .search-input:focus {
    box-shadow: 0 0 0 2px var(--theme-text-accent);
    color: var(--theme-text);
  }

  .search-input:hover::placeholder,
  .search-input:focus::placeholder {
    color: var(--theme-text-light);
  }

  .search-input::placeholder {
    color: var(--theme-text-light);
  }

  .search-input svg {
    margin-right: 0.25rem;
  }

  .search-text {
    margin-right: 1em;
  }

  .search-hint {
    display: none;
    justify-content: center;
    align-items: center;
    border-width: 1px;
    border-style: solid;
    border-color: var(--theme-text-lighter);
    border-radius: 0.5rem;
    padding: 3px 5px;
    pointer-events: none;
    color: var(--theme-text-light);
    font-size: 13px;
    line-height: 14px;
    font-family: var(--font-mono);
    letter-spacing: 0.125em;
  }

  @media (min-width: 50em) {
    .search-hint {
      display: flex;
    }
  }

  site-search :global(dialog) {
    @apply h-full max-h-full min-h-0 w-full max-w-full rounded-2xl p-0 shadow-2xl open:grid;
  }

  site-search :global(dialog::backdrop) {
    @apply backdrop-blur-md;
    background-color: var(--theme-backdrop-color);
  }

  .dialog-frame {
    @apply grid min-h-0 overflow-hidden;
  }

  #pagefind__search {
    @apply grid min-h-0;
  }

  @media (min-width: 50rem) {
    #pagefind__search {
    }

    site-search :global(dialog) {
      @apply h-max max-w-2xl bg-transparent p-0;
      margin: 3rem auto 2rem auto;
      height: calc(100% - 5rem);
      max-height: calc(100% - 5rem);
    }

    .dialog-frame {
      background-color: var(--docsearch-modal-background);
    }
  }
</style>

<style is:global>
  body.search-dialog-open {
    height: 100vh;
    overflow: hidden;
  }

  #pagefind__search .pagefind-ui {
    @apply grid min-h-0;
  }

  #pagefind__search .pagefind-ui__form {
    @apply grid h-full min-h-0;
    grid-template-rows: min-content 1fr;
  }

  /* Search icon */
  #pagefind__search .pagefind-ui__form::before {
    --pagefind-ui-text: var(--theme-text-lighter);
    opacity: 1;
  }

  #pagefind__search .pagefind-ui__search-input {
    @apply rounded-none border-0 border-b-2 bg-transparent;
    color: var(--theme-text);
    font-weight: 400;
    width: 100%;
    border-color: var(--theme-divider);
  }

  #pagefind__search .pagefind-ui__search-input:focus {
    @apply outline-none;
  }

  #pagefind__search .pagefind-ui__search-clear {
    display: none;
  }
  #pagefind__search .pagefind-ui__search-clear:focus {
    outline: 1px solid var(--theme-accent-color);
  }
  #pagefind__search .pagefind-ui__search-clear::before {
    content: "";
    -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
      center / 50% no-repeat;
    mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
      center / 50% no-repeat;
    background-color: hsla(var(--theme-accent-color));
    display: block;
    width: 100%;
    height: 100%;
  }

  #pagefind__search .pagefind-ui__drawer {
    @apply grid h-full min-h-0 overflow-y-auto px-4 py-2;
  }

  #pagefind__search .pagefind-ui__message {
    @apply p-0 font-normal italic;
    color: var(--theme-text-lighter);
  }

  #pagefind__search .pagefind-ui__results-area {
    @apply m-0 flex flex-col gap-2;
  }

  #pagefind__search .pagefind-ui__results {
    @apply flex flex-col divide-y;
  }

  #pagefind__search .pagefind-ui__result {
    @apply relative border-0 p-0 px-3 py-2 first:rounded-t-xl last:rounded-b-xl;
    background-color: var(--theme-card);
    border-color: var(--theme-card-divider);
  }

  #pagefind__search p,
  #pagefind__search mark {
    color: inherit;
  }

  #pagefind__search .pagefind-ui__result {
    color: var(--theme-text-light);
  }

  #pagefind__search .pagefind-ui__result:hover,
  #pagefind__search .pagefind-ui__result:focus-within {
    color: var(--theme-text);
    background-color: var(--theme-card-hover);
  }
  #pagefind__search .pagefind-ui__result:focus-within {
  }

  #pagefind__search .pagefind-ui__result-thumb,
  #pagefind__search .pagefind-ui__result-inner {
    @apply m-0;
  }

  #pagefind__search .pagefind-ui__result-title,
  #pagefind__search .pagefind-ui__result-link {
    color: var(--theme-text);
  }

  #pagefind__search .pagefind-ui__result-link:hover {
  }

  #pagefind__search .pagefind-ui__result-link::after {
    @apply absolute inset-0;
    content: "";
  }

  #pagefind__search .pagefind-ui__result-excerpt {
    @apply m-0 text-xs;
    word-break: break-word;
  }

  #pagefind__search mark {
    background: none;
    font-weight: 500;
  }

  #pagefind__search .pagefind-ui__result:focus-within mark {
  }

  #pagefind__search .pagefind-ui__button {
    @apply m-0 mb-2 mt-4 block h-auto rounded-xl border-0 py-2 text-center capitalize;
    background-color: var(--theme-card);
    color: var(--theme-text);
  }
</style>
