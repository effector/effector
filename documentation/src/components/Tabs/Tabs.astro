---
import { initTabs } from "./init-tabs";

interface Props {
  syncId?: string;
}

const { syncId } = Astro.props;

const html = await Astro.slots.render("default");
const { content, tabs } = initTabs(html);
---

<tabs-container data-sync-id={syncId} data-rendered="false">
  {
    tabs && (
      <ul role="tablist">
        {tabs.map(({ id, label }, i) => (
          <li role="presentation" class="tab">
            <button
              role="tab"
              aria-selected={i === 0 ? "true" : "false"}
              id={`tab-${id}`}
              tabindex={i === 0 ? 0 : -1}
            >
              {label}
            </button>
          </li>
        ))}
      </ul>
    )
  }
  <Fragment set:html={content} />
</tabs-container>

<script>
  type SwitchTabParams = {
    activeTabIndex: number;
    shoudTabFocused?: boolean;
  };

  class Tabs extends HTMLElement {
    static syncedTabs = new Map<string, Tabs[]>();

    tabs: Array<HTMLButtonElement> = [];
    tabContents: Array<HTMLDivElement> = [];
    syncId: string | undefined;

    constructor() {
      super();
      this.init();
    }

    init = () => {
      this.tabs = [...this.querySelectorAll<HTMLButtonElement>('[role="tab"]')];
      this.tabContents = [...this.querySelectorAll<HTMLDivElement>('[role="tabpanel"]')];
      this.syncId = this.dataset.syncId;

      if (this.syncId) {
        const syncedTabs = Tabs.syncedTabs.get(this.syncId) ?? [];
        syncedTabs.push(this);
        Tabs.syncedTabs.set(this.syncId, syncedTabs);
      }

      this.tabs.forEach((tab) => {
        tab.addEventListener("click", this.handleClick);
        tab.addEventListener("keydown", this.handleKeyDown);
      });
    };

    handleKeyDown = (e: KeyboardEvent) => {
      const pressedButton = e.key;
      const currentActiveTab = e.currentTarget;

      const keyboardDirections = {
        ArrowLeft: -1,
        ArrowRight: 1,
      };

      if (!(pressedButton in keyboardDirections)) {
        return;
      }

      const direction = keyboardDirections[pressedButton as keyof typeof keyboardDirections];

      const index = this.tabs.indexOf(currentActiveTab as HTMLButtonElement);
      let newActiveTabIndex = index + direction;

      if (newActiveTabIndex < 0) {
        newActiveTabIndex = this.tabs.length - 1;
      } else if (newActiveTabIndex > this.tabs.length - 1) {
        newActiveTabIndex = 0;
      }

      const nwActiveTabLabel = this.getTabLabel(this.tabs[newActiveTabIndex])!;

      this.switchTab({ activeTabIndex: newActiveTabIndex });

      if (!this.syncId) {
        return;
      }

      this.syncTabs(nwActiveTabLabel, this.syncId);
    };

    handleClick = (e: MouseEvent) => {
      const currentElement = e.currentTarget!;
      const currentActiveTab = this.querySelector('[aria-selected="true"]')!;

      if (currentElement === currentActiveTab) {
        return;
      }

      const label = this.getTabLabel(e.currentTarget as HTMLButtonElement)!;

      const index = this.tabs.findIndex((tab) => {
        const tabLabel = this.getTabLabel(tab);

        return label === tabLabel;
      });

      this.switchTab({
        activeTabIndex: index,
      });

      if (!this.syncId) {
        return;
      }

      this.syncTabs(label, this.syncId);
    };

    switchTab = ({ activeTabIndex, shoudTabFocused = true }: SwitchTabParams) => {
      this.tabs.forEach((tab) => {
        tab.setAttribute("aria-selected", "false");
        tab.tabIndex = -1;
      });

      this.tabContents.forEach((content) => {
        content.setAttribute("hidden", "true");
      });

      const newActiveTab = this.tabs[activeTabIndex];
      newActiveTab.setAttribute("aria-selected", "true");
      newActiveTab.tabIndex = 0;

      if (shoudTabFocused) {
        newActiveTab.focus();
      }

      const newTabContent = this.tabContents[activeTabIndex];
      newTabContent.hidden = false;
    };

    syncTabs = (label: string, syncId: string) => {
      const syncedTabs = Tabs.syncedTabs.get(syncId);

      syncedTabs?.forEach((tabContainer) => {
        const index = tabContainer.tabs.findIndex((tab) => {
          const tabLabel = this.getTabLabel(tab);

          return label === tabLabel;
        });

        if (tabContainer.tabs[index]) {
          console.log(tabContainer.tabs[index]);
          tabContainer.switchTab({ activeTabIndex: index, shoudTabFocused: false });
        }
      });
    };

    getTabLabel = (tab: Element) => {
      return tab.textContent?.trim();
    };
  }

  customElements.define("tabs-container", Tabs);
</script>

<style>
  ul[role="tablist"] {
    display: flex;
    gap: 20px;
    border-bottom: 2px solid var(--theme-divider);
    padding: 0px;
    margin-bottom: 10px;
  }

  li {
    cursor: pointer;
    list-style: none;
    margin: -2px;
  }

  .tab > button[role="tab"] {
    border-radius: 2px;
  }

  .tab:has(> [aria-selected="true"]) {
    border-bottom: 2px solid var(--theme-accent);
  }
</style>
